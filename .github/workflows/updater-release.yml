# GitHub Releases에서 Tauri 업데이터를 위한 메타데이터 자동 생성
name: Release with Updater Metadata

on:
  push:
    tags:
      - "v*"

jobs:
  create-release:
    permissions:
      contents: write
    runs-on: ubuntu-latest
    outputs:
      release_id: ${{ steps.create-release.outputs.result }}

    steps:
      - uses: actions/checkout@v4
      - name: setup node
        uses: actions/setup-node@v4
        with:
          node-version: 20
      - name: install pnpm
        uses: pnpm/action-setup@v4
        with:
          version: 8

      - name: get version
        run: echo "PACKAGE_VERSION=$(node -pe "require('./package.json').version")" >> $GITHUB_ENV

      - name: create release
        id: create-release
        uses: actions/github-script@v7
        with:
          script: |
            const { data } = await github.rest.repos.createRelease({
              owner: context.repo.owner,
              repo: context.repo.repo,
              tag_name: `v${process.env.PACKAGE_VERSION}`,
              name: `Claude Code History Viewer v${process.env.PACKAGE_VERSION}`,
              body: '🎉 새로운 버전이 출시되었습니다! 자세한 변경사항은 아래를 확인하세요.',
              generate_release_notes: true,
              draft: false,
              prerelease: false,
            });
            return data.id;

  build-tauri:
    needs: create-release
    permissions:
      contents: write
    strategy:
      fail-fast: false
      matrix:
        platform: [macos-latest]

    runs-on: ${{ matrix.platform }}
    steps:
      - uses: actions/checkout@v4

      - name: setup node
        uses: actions/setup-node@v4
        with:
          node-version: 20

      - name: install Rust stable
        uses: dtolnay/rust-toolchain@stable

      - name: install pnpm
        uses: pnpm/action-setup@v4
        with:
          version: 8

      - name: install frontend dependencies
        run: pnpm install

      - uses: tauri-apps/tauri-action@v0
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          TAURI_SIGNING_PRIVATE_KEY: ${{ secrets.TAURI_SIGNING_PRIVATE_KEY }}
          TAURI_SIGNING_PRIVATE_KEY_PASSWORD: ${{ secrets.TAURI_SIGNING_PRIVATE_KEY_PASSWORD }}
          APPLE_CERTIFICATE: ${{ secrets.APPLE_CERTIFICATE }}
          APPLE_CERTIFICATE_PASSWORD: ${{ secrets.APPLE_CERTIFICATE_PASSWORD }}
          APPLE_SIGNING_IDENTITY: ${{ secrets.APPLE_SIGNING_IDENTITY }}
          APPLE_ID: ${{ secrets.APPLE_ID }}
          APPLE_PASSWORD: ${{ secrets.APPLE_PASSWORD }}
          APPLE_TEAM_ID: ${{ secrets.APPLE_TEAM_ID }}
        with:
          releaseId: ${{ needs.create-release.outputs.release_id }}

  generate-updater-metadata:
    needs: [create-release, build-tauri]
    permissions:
      contents: write
    runs-on: ubuntu-latest

    steps:
      - uses: actions/checkout@v4

      # 'latest' 대신 ID로 특정 릴리스를 조회하여 Race Condition을 방지하고 안정성을 높입니다.
      - name: Get specific release info by ID
        id: release
        run: |
          echo "📡 Fetching release information for ID: ${{ needs.create-release.outputs.release_id }}"

          RELEASE_INFO=$(curl -s -L \
            -H "Accept: application/vnd.github+json" \
            -H "Authorization: Bearer ${{ secrets.GITHUB_TOKEN }}" \
            -H "X-GitHub-Api-Version: 2022-11-28" \
            "https://api.github.com/repos/${{ github.repository }}/releases/${{ needs.create-release.outputs.release_id }}")

          # curl 호출이 실패했거나 유효한 JSON이 아닌 경우 워크플로우를 중단시킵니다.
          if ! echo "$RELEASE_INFO" | jq . > /dev/null 2>&1; then
            echo "::error::Failed to fetch or parse release information from GitHub API."
            echo "Response was: $RELEASE_INFO"
            exit 1
          fi

          echo "✅ Successfully fetched release information"
          echo "🏷️ Release tag: $(echo "$RELEASE_INFO" | jq -r '.tag_name')"

          # 셸 인용 문제를 피하기 위해 heredoc 문법으로 안전하게 출력을 설정합니다.
          echo "release_info<<EOF" >> $GITHUB_OUTPUT
          echo "$RELEASE_INFO" >> $GITHUB_OUTPUT
          echo "EOF" >> $GITHUB_OUTPUT

      - name: Generate latest.json for Tauri updater
        # 릴리스 정보를 환경 변수로 전달하여 셸 인용 문제를 근본적으로 해결합니다.
        env:
          RELEASE_INFO: ${{ steps.release.outputs.release_info }}
        run: |
          # 환경 변수에서 파일로 쓰는 것이 가장 안전한 방법입니다.
          echo "$RELEASE_INFO" > release.json

          # 릴리즈 정보에서 필요한 데이터 직접 추출
          VERSION=$(jq -r '.tag_name' release.json | sed 's/^v//')
          PUB_DATE=$(jq -r '.published_at' release.json)

          echo "Processing release version: $VERSION"
          echo "Publish date: $PUB_DATE"

          # macOS DMG 파일 URL과 서명 추출
          DMG_URL=$(jq -r '.assets[] | select(.name | contains(".dmg") and (.name | contains(".sig") | not)) | .browser_download_url' release.json)
          DMG_SIG=$(jq -r '.assets[] | select(.name | contains(".dmg.sig")) | .browser_download_url' release.json)

          echo "DMG URL: $DMG_URL"
          echo "DMG SIG URL: $DMG_SIG"

          # 서명 내용 다운로드 (base64로 인코딩)
          DMG_SIGNATURE=""
          if [ -n "$DMG_SIG" ] && [ "$DMG_SIG" != "null" ]; then
            DMG_SIGNATURE=$(curl -sL "$DMG_SIG" | base64 -w 0)
          fi

          # jq를 사용해서 안전하게 JSON 생성
          jq -n \
            --arg version "$VERSION" \
            --argjson notes "$(jq '.body' release.json)" \
            --arg pub_date "$PUB_DATE" \
            --arg signature "$DMG_SIGNATURE" \
            --arg url "$DMG_URL" \
            '{
              version: $version,
              notes: $notes,
              pub_date: $pub_date,
              platforms: {
                "darwin-universal": {
                  signature: $signature,
                  url: $url
                }
              }
            }' > latest.json

          echo "Generated latest.json:"
          cat latest.json

      - name: Upload latest.json to release
        run: |
          gh release upload ${{ github.ref_name }} latest.json --clobber
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
